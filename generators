# import timeit
# # help(timeit.timeit)
# # t=timeit.timeit(stmt="""l2 = [value*value for value in range(1,10000000)]""",number=1)
# # print(t)

# t= timeit.timeit(stmt="""
# m= list(map(lambda num:num*num,range(1,10000000)))
# """,number=1)
# print(t)


# t = timeit.timeit(stmt="""
# l=[]
# for value in range(1,10000000):
# 	l.append(value*value)""",number=1)
# print(t)


# map 0.6  7 
# list  3.20
# for  6.5 

# generators :

# def fibo():
# 	first_num = 0
# 	second_num = 1 
# 	yield second_num
# 	while(True):
# 		next_num = first_num + second_num
# 		yield next_num
# 		# yield next_num		
# 		first_num,second_num = second_num,next_num


# g = fibo()
# print(g)
# print(next(g))
# print(next(g))
# print(next(g))

# print(next(g))

# for value in range(1,3):
# 	print(next(g))


# for value in range(1,5):
# 	print(next(g))


# def printVal(l):
# 	for value in l:
# 		return value
# 		yield(value)
		
# g = printVal([10,20,30,40,50])
# print(g)
# print(next(g))
# print(next(g))
# print(next(g))
# print(next(g))
# print(next(g))
# print(next(g))
# for value in g:
# 	print(value)


# l = [10,20,30,40,50]
# l2 = (value * value for value in l)
# print(l2)
# print(next(l2))
# print(next(l2))

# [0][0] [0][1][0][2]   [0][0] [0][1]
# 1 2 3    100 200 300 
# [1][0]
# 4 5 6	 400 500 600
# 7 8 9    700 800 900 
# m1			m2

l1 = [[1,2,3],[4,5,6],[7,8,9]]
l2 = [[100,200,300],[400,500,600],[700,800,900]]
# l3 = []

# for value in range(len(l1)):
# 	l4=[]
# 	for value1 in range(len(l1[0])):
# 			sum = l1[value][value1] + l2[value][value1]
# 			l4.append(sum)

# 	l3.append(l4)

# print(l3)
# l3 = [
# [l1[value][value1] + l2[value][value1] for value1 in range(len(l1[0]))]
# for value in range(len(l1))
# ]

# print(l3)

# 6 1+ 2 +3   1-6//2 
# 64 32+1

# def perfect_num(num):
# 	sum = 0
# 	for value in range(1 ,(num // 2)+1):
# 		if num % value == 0:
# 			sum = sum+value
# 	if sum == num:
# 		return True
# 	else:
# 		return False


# f= list(filter(perfect_num,range(1,600)))
# print(f)

import itertools 

# 1 Chain 
# l1 = [10,20,30,40,50]
# l2 = [100,200,300,400]
# l3=["Python","Java","C"]
# l4 = (200,500,600)
# l5 = range(1,5)

# for value in itertools.chain(l1,l2,l3,l4,l5):
# 	print(value)

# for value in zip(l1,l2,l3):
# 	print(value)

# range(5)
# range(5,50)
# range(6,60,2)


# for value in itertools.count(10,5):
# 	if value > 50:
# 		break
# 	print(value)	

# l = [100,200,300,400,500,600]

# d = {2,5,10,100,24,35}
# for value in itertools.islice(d,0,3):
# 	print(value)
# help(itertools.islice)
l = [10,20,30,40,50]
# count=1
# for value in itertools.repeat("Python string"):
# 	print(value)
# 	count+=1
# 	if(count>20):
# 		break

# t = itertools.tee(l,5)
# print(t)
# print(t[0])
# for value in t[0]:
# 	print(value,end = " ")

# for value2 in t[1]:
# 	print(value2,end = " ")

# print(list(itertools.permutations([1,2,3],2)))
# print(list(itertools.combinations([1,2,3],2)))


list comprehension  list transformation operation  
map 
filter
lambda  

generators  - functions :
itertools  - looping 

OOP
decorators 
xml and json 
beautifulSoup
socket
threading
database access  
